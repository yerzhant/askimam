// Mocks generated by Mockito 5.4.4 from annotations
// in askimam/test/chat/ui/chat_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:typed_data' as _i14;
import 'dart:ui' as _i11;

import 'package:askimam/auth/bloc/auth_bloc.dart' as _i7;
import 'package:askimam/chat/bloc/chat_bloc.dart' as _i3;
import 'package:bloc/bloc.dart' as _i6;
import 'package:flutter/material.dart' as _i10;
import 'package:flutter_modular/src/presenter/models/modular_navigator.dart'
    as _i8;
import 'package:flutter_modular/src/presenter/models/route.dart' as _i9;
import 'package:flutter_sound/flutter_sound.dart' as _i12;
import 'package:flutter_sound_platform_interface/flutter_sound_recorder_platform_interface.dart'
    as _i13;
import 'package:logger/logger.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLogger_0 extends _i1.SmartFake implements _i2.Logger {
  _FakeLogger_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ChatBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockChatBloc extends _i1.Mock implements _i3.ChatBloc {
  @override
  _i3.ChatState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i4.dummyValue<_i3.ChatState>(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _i4.dummyValue<_i3.ChatState>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.ChatState);

  @override
  _i5.Stream<_i3.ChatState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i5.Stream<_i3.ChatState>.empty(),
        returnValueForMissingStub: _i5.Stream<_i3.ChatState>.empty(),
      ) as _i5.Stream<_i3.ChatState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void add(_i3.ChatEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i3.ChatEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i3.ChatState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i3.ChatEvent>(
    _i6.EventHandler<E, _i3.ChatState>? handler, {
    _i6.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(_i6.Transition<_i3.ChatEvent, _i3.ChatState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void onChange(_i6.Change<_i3.ChatState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AuthBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthBloc extends _i1.Mock implements _i7.AuthBloc {
  @override
  _i7.AuthState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i4.dummyValue<_i7.AuthState>(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _i4.dummyValue<_i7.AuthState>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i7.AuthState);

  @override
  _i5.Stream<_i7.AuthState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i5.Stream<_i7.AuthState>.empty(),
        returnValueForMissingStub: _i5.Stream<_i7.AuthState>.empty(),
      ) as _i5.Stream<_i7.AuthState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i5.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void add(_i7.AuthEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i7.AuthEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i7.AuthState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i7.AuthEvent>(
    _i6.EventHandler<E, _i7.AuthState>? handler, {
    _i6.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(_i6.Transition<_i7.AuthEvent, _i7.AuthState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i6.Change<_i7.AuthState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [IModularNavigator].
///
/// See the documentation for Mockito's code generation for more information.
class MockIModularNavigator extends _i1.Mock implements _i8.IModularNavigator {
  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
        returnValueForMissingStub: _i4.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
      ) as String);

  @override
  List<_i9.ParallelRoute<dynamic>> get navigateHistory => (super.noSuchMethod(
        Invocation.getter(#navigateHistory),
        returnValue: <_i9.ParallelRoute<dynamic>>[],
        returnValueForMissingStub: <_i9.ParallelRoute<dynamic>>[],
      ) as List<_i9.ParallelRoute<dynamic>>);

  @override
  _i5.Future<T?> push<T extends Object?>(_i10.Route<T>? route) =>
      (super.noSuchMethod(
        Invocation.method(
          #push,
          [route],
        ),
        returnValue: _i5.Future<T?>.value(),
        returnValueForMissingStub: _i5.Future<T?>.value(),
      ) as _i5.Future<T?>);

  @override
  _i5.Future<T?> popAndPushNamed<T extends Object?, TO extends Object?>(
    String? routeName, {
    TO? result,
    Object? arguments,
    bool? forRoot = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #popAndPushNamed,
          [routeName],
          {
            #result: result,
            #arguments: arguments,
            #forRoot: forRoot,
          },
        ),
        returnValue: _i5.Future<T?>.value(),
        returnValueForMissingStub: _i5.Future<T?>.value(),
      ) as _i5.Future<T?>);

  @override
  _i5.Future<T?> pushNamed<T extends Object?>(
    String? routeName, {
    Object? arguments,
    bool? forRoot = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pushNamed,
          [routeName],
          {
            #arguments: arguments,
            #forRoot: forRoot,
          },
        ),
        returnValue: _i5.Future<T?>.value(),
        returnValueForMissingStub: _i5.Future<T?>.value(),
      ) as _i5.Future<T?>);

  @override
  _i5.Future<T?> pushNamedAndRemoveUntil<T extends Object?>(
    String? newRouteName,
    bool Function(_i10.Route<dynamic>)? predicate, {
    Object? arguments,
    bool? forRoot = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pushNamedAndRemoveUntil,
          [
            newRouteName,
            predicate,
          ],
          {
            #arguments: arguments,
            #forRoot: forRoot,
          },
        ),
        returnValue: _i5.Future<T?>.value(),
        returnValueForMissingStub: _i5.Future<T?>.value(),
      ) as _i5.Future<T?>);

  @override
  _i5.Future<T?> pushReplacementNamed<T extends Object?, TO extends Object?>(
    String? routeName, {
    TO? result,
    Object? arguments,
    bool? forRoot = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pushReplacementNamed,
          [routeName],
          {
            #result: result,
            #arguments: arguments,
            #forRoot: forRoot,
          },
        ),
        returnValue: _i5.Future<T?>.value(),
        returnValueForMissingStub: _i5.Future<T?>.value(),
      ) as _i5.Future<T?>);

  @override
  void pop<T extends Object?>([T? result]) => super.noSuchMethod(
        Invocation.method(
          #pop,
          [result],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool canPop() => (super.noSuchMethod(
        Invocation.method(
          #canPop,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i5.Future<bool> maybePop<T extends Object?>([T? result]) =>
      (super.noSuchMethod(
        Invocation.method(
          #maybePop,
          [result],
        ),
        returnValue: _i5.Future<bool>.value(false),
        returnValueForMissingStub: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  void popUntil(bool Function(_i10.Route<dynamic>)? predicate) =>
      super.noSuchMethod(
        Invocation.method(
          #popUntil,
          [predicate],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void navigate(
    String? path, {
    dynamic arguments,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #navigate,
          [path],
          {#arguments: arguments},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setObservers(List<_i10.NavigatorObserver>? navigatorObservers) =>
      super.noSuchMethod(
        Invocation.method(
          #setObservers,
          [navigatorObservers],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setNavigatorKey(_i10.GlobalKey<_i10.NavigatorState>? navigatorkey) =>
      super.noSuchMethod(
        Invocation.method(
          #setNavigatorKey,
          [navigatorkey],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i11.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i11.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [FlutterSoundRecorder].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlutterSoundRecorder extends _i1.Mock
    implements _i12.FlutterSoundRecorder {
  @override
  _i2.Logger get logger => (super.noSuchMethod(
        Invocation.getter(#logger),
        returnValue: _FakeLogger_0(
          this,
          Invocation.getter(#logger),
        ),
        returnValueForMissingStub: _FakeLogger_0(
          this,
          Invocation.getter(#logger),
        ),
      ) as _i2.Logger);

  @override
  _i13.RecorderState get recorderState => (super.noSuchMethod(
        Invocation.getter(#recorderState),
        returnValue: _i13.RecorderState.isStopped,
        returnValueForMissingStub: _i13.RecorderState.isStopped,
      ) as _i13.RecorderState);

  @override
  bool get isRecording => (super.noSuchMethod(
        Invocation.getter(#isRecording),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get isStopped => (super.noSuchMethod(
        Invocation.getter(#isStopped),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get isPaused => (super.noSuchMethod(
        Invocation.getter(#isPaused),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i5.Future<void> setLogLevel(_i2.Level? aLevel) => (super.noSuchMethod(
        Invocation.method(
          #setLogLevel,
          [aLevel],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void recordingData({_i14.Uint8List? data}) => super.noSuchMethod(
        Invocation.method(
          #recordingData,
          [],
          {#data: data},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateRecorderProgress({
    int? duration,
    double? dbPeakLevel,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #updateRecorderProgress,
          [],
          {
            #duration: duration,
            #dbPeakLevel: dbPeakLevel,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void openRecorderCompleted(
    int? state,
    bool? success,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #openRecorderCompleted,
          [
            state,
            success,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void closeRecorderCompleted(
    int? state,
    bool? success,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #closeRecorderCompleted,
          [
            state,
            success,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void pauseRecorderCompleted(
    int? state,
    bool? success,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #pauseRecorderCompleted,
          [
            state,
            success,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void resumeRecorderCompleted(
    int? state,
    bool? success,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #resumeRecorderCompleted,
          [
            state,
            success,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void startRecorderCompleted(
    int? state,
    bool? success,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #startRecorderCompleted,
          [
            state,
            success,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void stopRecorderCompleted(
    int? state,
    bool? success,
    String? url,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #stopRecorderCompleted,
          [
            state,
            success,
            url,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void log(
    _i2.Level? logLevel,
    String? msg,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #log,
          [
            logLevel,
            msg,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<_i12.FlutterSoundRecorder?> openRecorder() => (super.noSuchMethod(
        Invocation.method(
          #openRecorder,
          [],
        ),
        returnValue: _i5.Future<_i12.FlutterSoundRecorder?>.value(),
        returnValueForMissingStub:
            _i5.Future<_i12.FlutterSoundRecorder?>.value(),
      ) as _i5.Future<_i12.FlutterSoundRecorder?>);

  @override
  _i5.Future<void> closeRecorder() => (super.noSuchMethod(
        Invocation.method(
          #closeRecorder,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<bool> isEncoderSupported(_i12.Codec? codec) => (super.noSuchMethod(
        Invocation.method(
          #isEncoderSupported,
          [codec],
        ),
        returnValue: _i5.Future<bool>.value(false),
        returnValueForMissingStub: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<void> setSubscriptionDuration(Duration? duration) =>
      (super.noSuchMethod(
        Invocation.method(
          #setSubscriptionDuration,
          [duration],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> startRecorder({
    _i12.Codec? codec = _i12.Codec.defaultCodec,
    String? toFile,
    _i5.StreamSink<_i12.Food>? toStream,
    int? sampleRate = 16000,
    int? numChannels = 1,
    int? bitRate = 16000,
    _i13.AudioSource? audioSource = _i13.AudioSource.defaultSource,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #startRecorder,
          [],
          {
            #codec: codec,
            #toFile: toFile,
            #toStream: toStream,
            #sampleRate: sampleRate,
            #numChannels: numChannels,
            #bitRate: bitRate,
            #audioSource: audioSource,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<String?> stopRecorder() => (super.noSuchMethod(
        Invocation.method(
          #stopRecorder,
          [],
        ),
        returnValue: _i5.Future<String?>.value(),
        returnValueForMissingStub: _i5.Future<String?>.value(),
      ) as _i5.Future<String?>);

  @override
  _i5.Future<void> pauseRecorder() => (super.noSuchMethod(
        Invocation.method(
          #pauseRecorder,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> resumeRecorder() => (super.noSuchMethod(
        Invocation.method(
          #resumeRecorder,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<bool?> deleteRecord({required String? fileName}) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteRecord,
          [],
          {#fileName: fileName},
        ),
        returnValue: _i5.Future<bool?>.value(),
        returnValueForMissingStub: _i5.Future<bool?>.value(),
      ) as _i5.Future<bool?>);

  @override
  _i5.Future<String?> getRecordURL({required String? path}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRecordURL,
          [],
          {#path: path},
        ),
        returnValue: _i5.Future<String?>.value(),
        returnValueForMissingStub: _i5.Future<String?>.value(),
      ) as _i5.Future<String?>);
}
