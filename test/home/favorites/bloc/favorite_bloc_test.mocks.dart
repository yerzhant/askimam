// Mocks generated by Mockito 5.4.4 from annotations
// in askimam/test/home/favorites/bloc/favorite_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:askimam/chat/domain/model/chat.dart' as _i7;
import 'package:askimam/common/domain/model/rejection.dart' as _i5;
import 'package:askimam/home/favorites/domain/model/favorite.dart' as _i6;
import 'package:askimam/home/favorites/domain/repo/favorite_repository.dart'
    as _i3;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeOption_1<A> extends _i1.SmartFake implements _i2.Option<A> {
  _FakeOption_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FavoriteRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockFavoriteRepository extends _i1.Mock
    implements _i3.FavoriteRepository {
  MockFavoriteRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Rejection, List<_i6.Favorite>>> get() =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Rejection, List<_i6.Favorite>>>.value(
                _FakeEither_0<_i5.Rejection, List<_i6.Favorite>>(
          this,
          Invocation.method(
            #get,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Rejection, List<_i6.Favorite>>>);

  @override
  _i4.Future<_i2.Option<_i5.Rejection>> add(_i7.Chat? chat) =>
      (super.noSuchMethod(
        Invocation.method(
          #add,
          [chat],
        ),
        returnValue: _i4.Future<_i2.Option<_i5.Rejection>>.value(
            _FakeOption_1<_i5.Rejection>(
          this,
          Invocation.method(
            #add,
            [chat],
          ),
        )),
      ) as _i4.Future<_i2.Option<_i5.Rejection>>);

  @override
  _i4.Future<_i2.Option<_i5.Rejection>> delete(int? chatId) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [chatId],
        ),
        returnValue: _i4.Future<_i2.Option<_i5.Rejection>>.value(
            _FakeOption_1<_i5.Rejection>(
          this,
          Invocation.method(
            #delete,
            [chatId],
          ),
        )),
      ) as _i4.Future<_i2.Option<_i5.Rejection>>);
}
